// Generated by CoffeeScript 1.6.3
(function() {
  var Command, RoomHelper, User, addCommand, afkCheck, afksCommand, allAfksCommand, announceCurate, antispam, apiHooks, avgVoteRatioCommand, badQualityCommand, beggar, chatCommandDispatcher, chatUniversals, cmds, commandsCommand, cookieCommand, data, dieCommand, disconnectLookupCommand, downloadCommand, forceSkipCommand, handleNewSong, handleUserJoin, handleUserLeave, handleVote, hook, initEnvironment, initHooks, initialize, lockCommand, lockskipCommand, msToStr, newSongsCommand, overplayedCommand, popCommand, populateUserData, pupOnline, pushCommand, reloadCommand, resetAfkCommand, roomHelpCommand, rulesCommand, settings, skipCommand, staffCommand, sourceCommand, statusCommand, swapCommand, themeCommand, undoHooks, unhook, unhookCommand, unlockCommand, updateVotes, uservoiceCommand, voteRatioCommand, whyMehCommand, whyWootCommand, wootCommand, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref19, _ref2, _ref20, _ref21, _ref22, _ref23, _ref24, _ref25, _ref26, _ref27, _ref28, _ref29, _ref3, _ref30, _ref32, ref33, _ref34, ref35, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  settings = (function() {
    function settings() {
      this.implode = __bind(this.implode, this);
      this.intervalMessages = __bind(this.intervalMessages, this);
      this.startAfkInterval = __bind(this.startAfkInterval, this);
      this.setInternalWaitlist = __bind(this.setInternalWaitlist, this);
      this.userJoin = __bind(this.userJoin, this);
      this.getRoomUrlPath = __bind(this.getRoomUrlPath, this);
      this.startup = __bind(this.startup, this);
    }

    settings.prototype.currentsong = {};

    settings.prototype.users = {};

    settings.prototype.djs = [];

    settings.prototype.mods = [];

    settings.prototype.host = [];

    settings.prototype.hasWarned = false;

    settings.prototype.currentwoots = 0;

    settings.prototype.currentmehs = 0;

    settings.prototype.currentcurates = 0;

    settings.prototype.roomUrlPath = null;

    settings.prototype.internalWaitlist = [];

    settings.prototype.userDisconnectLog = [];

    settings.prototype.voteLog = {};

    settings.prototype.seshOn = false;

    settings.prototype.forceSkip = false;

    settings.prototype.seshMembers = [];

    settings.prototype.launchTime = null;

    settings.prototype.totalVotingData = {
      woots: 0,
      mehs: 0,
      curates: 0
    };

    settings.prototype.pupScriptUrl = 'https://raw.github.com/SidneiAlves2013/Bot-sala1/master/BotModerator';

    settings.prototype.afkTime = 30 * 60 * 1000;

    settings.prototype.songIntervalMessages = [
      {
        interval: 7,
        offset: 0,
        msg: "/em: Mantenha-se sempre votando, se não será removido da lista de espera e da cabine de DJ."
      },{
        interval: 5,
        offset: 0,
        msg: "/em: Make sure that you're voting or you will be removed from the wait list and from the DJ Booth."
      },{
        interval: 9,
        offset: 0,
        msg: "/em: Não temos um grupo especifico, aguarde que em breve teremos"
      }
    ];

    settings.prototype.songCount = 0;

    settings.prototype.startup = function() {
      this.launchTime = new Date();
      return this.roomUrlPath = this.getRoomUrlPath();
    };

    settings.prototype.getRoomUrlPath = function() {
      return window.location.pathname.replace(/\//g, '');
    };

    settings.prototype.newSong = function() {
      this.totalVotingData.woots += this.currentwoots;
      this.totalVotingData.mehs += this.currentmehs;
      this.totalVotingData.curates += this.currentcurates;
      this.setInternalWaitlist();
      this.currentsong = API.getMedia();
      if (this.currentsong !== null) {
        return this.currentsong;
      } else {
        return false;
      }
    };

    settings.prototype.userJoin = function(u) {
      var userIds, _ref;
      userIds = Object.keys(this.users);
      if (_ref = u.id, __indexOf.call(userIds, _ref) >= 0) {
        return this.users[u.id].inRoom(true);
      } else {
        this.users[u.id] = new User(u);
        return this.voteLog[u.id] = {};
      }
    };

    settings.prototype.setInternalWaitlist = function() {
      var boothWaitlist, fullWaitList, lineWaitList;
      boothWaitlist = API.getDJs().slice(1);
      lineWaitList = API.getWaitList();
      fullWaitList = boothWaitlist.concat(lineWaitList);
      return this.internalWaitlist = fullWaitList;
    };

    settings.prototype.activity = function(obj) {
      if (obj.type === 'message') {
        return this.users[obj.fromID].updateActivity();
      }
    };

    settings.prototype.startAfkInterval = function() {
      return this.afkInterval = setInterval(afkCheck, 2000);
    };

    settings.prototype.intervalMessages = function() {
      var msg, _i, _len, _ref, _results;
      this.songCount++;
      _ref = this.songIntervalMessages;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        msg = _ref[_i];
        if (((this.songCount + msg['offset']) % msg['interval']) === 0) {
          _results.push(API.sendChat(msg['msg']));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    settings.prototype.implode = function() {
      var item, val;
      for (item in this) {
        val = this[item];
        if (typeof this[item] === 'object') {
          delete this[item];
        }
      }
      return clearInterval(this.afkInterval);
    };

    settings.prototype.lockBooth = function(callback) {
      if (callback == null) {
        callback = null;
      }
      return $.ajax({
        url: "http://plug.dj/_/gateway/room.update_options",
        type: 'POST',
        data: JSON.stringify({
          service: "room.update_options",
          body: [
            this.roomUrlPath, {
              "boothLocked": true,
              "waitListEnabled": true,
              "maxPlays": 1,
              "maxDJs": 5
            }
          ]
        }),
        async: this.async,
        dataType: 'json',
        contentType: 'application/json'
      }).done(function() {
        if (callback != null) {
          return callback();
        }
      });
    };

    settings.prototype.unlockBooth = function(callback) {
      if (callback == null) {
        callback = null;
      }
      return $.ajax({
        url: "http://plug.dj/_/gateway/room.update_options",
        type: 'POST',
        data: JSON.stringify({
          service: "room.update_options",
          body: [
            this.roomUrlPath, {
              "boothLocked": false,
              "waitListEnabled": true,
              "maxPlays": 1,
              "maxDJs": 5
            }
          ]
        }),
        async: this.async,
        dataType: 'json',
        contentType: 'application/json'
      }).done(function() {
        if (callback != null) {
          return callback();
        }
      });
    };

    return settings;

  })();

  data = new settings();

  User = (function() {
    User.prototype.afkWarningCount = 0;

    User.prototype.lastWarning = null;

    User.prototype["protected"] = false;

    User.prototype.isInRoom = true;

    function User(user) {
      this.user = user;
      this.updateVote = __bind(this.updateVote, this);
      this.inRoom = __bind(this.inRoom, this);
      this.notDj = __bind(this.notDj, this);
      this.warn = __bind(this.warn, this);
      this.getIsDj = __bind(this.getIsDj, this);
      this.getWarningCount = __bind(this.getWarningCount, this);
      this.getUser = __bind(this.getUser, this);
      this.getLastWarning = __bind(this.getLastWarning, this);
      this.getLastActivity = __bind(this.getLastActivity, this);
      this.updateActivity = __bind(this.updateActivity, this);
      this.init = __bind(this.init, this);
      this.init();
    }

    User.prototype.init = function() {
      return this.lastActivity = new Date();
    };

    User.prototype.updateActivity = function() {
      this.lastActivity = new Date();
      this.afkWarningCount = 0;
      return this.lastWarning = null;
    };

    User.prototype.getLastActivity = function() {
      return this.lastActivity;
    };

    User.prototype.getLastWarning = function() {
      if (this.lastWarning === null) {
        return false;
      } else {
        return this.lastWarning;
      }
    };

    User.prototype.getUser = function() {
      return this.user;
    };

    User.prototype.getWarningCount = function() {
      return this.afkWarningCount;
    };

    User.prototype.getIsDj = function() {
      var DJs, dj, _i, _len;
      DJs = API.getDJs();
      for (_i = 0, _len = DJs.length; _i < _len; _i++) {
        dj = DJs[_i];
        if (this.user.id === dj.id) {
          return true;
        }
      }
      return false;
    };

    User.prototype.warn = function() {
      this.afkWarningCount++;
      return this.lastWarning = new Date();
    };

    User.prototype.notDj = function() {
      this.afkWarningCount = 0;
      return this.lastWarning = null;
    };

    User.prototype.inRoom = function(online) {
      return this.isInRoom = online;
    };

    User.prototype.updateVote = function(v) {
      if (this.isInRoom) {
        return data.voteLog[this.user.id][data.currentsong.id] = v;
      }
    };

    return User;

  })();

  RoomHelper = (function() {
    function RoomHelper() {}

    RoomHelper.prototype.lookupUser = function(username) {
      var id, u, _ref;
      _ref = data.users;
      for (id in _ref) {
        u = _ref[id];
        if (u.getUser().username === username) {
          return u.getUser();
        }
      }
      return false;
    };

    RoomHelper.prototype.userVoteRatio = function(user) {
      var songId, songVotes, vote, votes;
      songVotes = data.voteLog[user.id];
      votes = {
        'woot': 0,
        'meh': 0
      };
      for (songId in songVotes) {
        vote = songVotes[songId];
        if (vote === 1) {
          votes['woot']++;
        } else if (vote === -1) {
          votes['meh']++;
        }
      }
      votes['positiveRatio'] = (votes['woot'] / (votes['woot'] + votes['meh'])).toFixed(2);
      return votes;
    };

    return RoomHelper;

  })();

  pupOnline = function() {
    return API.sendChat("/me:Bot versão ♫ᕮᒪᕮƬᖇ〇 Ƭᖇᗩᑭ & ÐᑌᙖᔕƬᕮᑭ♫ ზ  ON!");
  };

  populateUserData = function() {
    var u, users, _i, _len;
    users = API.getUsers();
    for (_i = 0, _len = users.length; _i < _len; _i++) {
      u = users[_i];
      data.users[u.id] = new User(u);
      data.voteLog[u.id] = {};
    }
  };

  initEnvironment = function() {
    document.getElementById("button-vote-positive").click();
    return document.getElementById("button-sound").click();
  };

  initialize = function() {
    pupOnline();
    populateUserData();
    initEnvironment();
    initHooks();
    data.startup();
    data.newSong();
    return data.startAfkInterval();
  };

  afkCheck = function() {
    var DJs, id, lastActivity, lastWarned, now, oneMinute, secsLastActive, timeSinceLastActivity, timeSinceLastWarning, twoMinutes, user, warnMsg, _ref, _results;
    _ref = data.users;
    _results = [];
    for (id in _ref) {
      user = _ref[id];
      now = new Date();
      lastActivity = user.getLastActivity();
      timeSinceLastActivity = now.getTime() - lastActivity.getTime();
      if (timeSinceLastActivity > data.afkTime) {
        if (user.getIsDj()) {
          secsLastActive = timeSinceLastActivity / 1000;
          if (user.getWarningCount() === 0) {
            user.warn();
            _results.push(API.sendChat("@" + user.getUser().username + ", Eu não vi você votar durante 30 minutos.  Vote nos próximos 2 minutos, se não será removido."));
          } else if (user.getWarningCount() === 1) {
            lastWarned = user.getLastWarning();
            timeSinceLastWarning = now.getTime() - lastWarned.getTime();
            twoMinutes = 2 * 60 * 1000;
            if (timeSinceLastWarning > twoMinutes) {
              user.warn();
              warnMsg = "@" + user.getUser().username;
              warnMsg += ", Eu não vi você votar durante 32 minutos. Vote no próximo minuto ou eu o removerei, este é seu ultimo aviso.";
              _results.push(API.sendChat(warnMsg));
            } else {
              _results.push(void 0);
            }
          } else if (user.getWarningCount() === 2) {
            lastWarned = user.getLastWarning();
            timeSinceLastWarning = now.getTime() - lastWarned.getTime();
            oneMinute = 1 * 60 * 1000;
            if (timeSinceLastWarning > oneMinute) {
              DJs = API.getDJs();
              if (DJs.length > 0 && DJs[0].id !== user.getUser().id) {
                API.sendChat("@" + user.getUser().username + ", Você teve 2 avisos. Por favor, mantenha-se sempre votando.");
                API.moderateRemoveDJ(id);
                _results.push(user.warn());
              } else {
                _results.push(void 0);
              }
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(user.notDj());
        }
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  msToStr = function(msTime) {
    var ms, msg, timeAway;
    msg = '';
    timeAway = {
      'days': 0,
      'hours': 0,
      'minutes': 0,
      'seconds': 0
    };
    ms = {
      'day': 24 * 60 * 60 * 1000,
      'hour': 60 * 60 * 1000,
      'minute': 60 * 1000,
      'second': 1000
    };
    if (msTime > ms['day']) {
      timeAway['days'] = Math.floor(msTime / ms['day']);
      msTime = msTime % ms['day'];
    }
    if (msTime > ms['hour']) {
      timeAway['hours'] = Math.floor(msTime / ms['hour']);
      msTime = msTime % ms['hour'];
    }
    if (msTime > ms['minute']) {
      timeAway['minutes'] = Math.floor(msTime / ms['minute']);
      msTime = msTime % ms['minute'];
    }
    if (msTime > ms['second']) {
      timeAway['seconds'] = Math.floor(msTime / ms['second']);
    }
    if (timeAway['days'] !== 0) {
      msg += timeAway['days'].toString() + 'd';
    }
    if (timeAway['hours'] !== 0) {
      msg += timeAway['hours'].toString() + 'h';
    }
    if (timeAway['minutes'] !== 0) {
      msg += timeAway['minutes'].toString() + 'm';
    }
    if (timeAway['seconds'] !== 0) {
      msg += timeAway['seconds'].toString() + 's';
    }
    if (msg !== '') {
      return msg;
    } else {
      return false;
    }
  };

  Command = (function() {
    function Command(msgData) {
      this.msgData = msgData;
      this.init();
    }

    Command.prototype.init = function() {
      this.parseType = null;
      this.command = null;
      return this.rankPrivelege = null;
    };

    Command.prototype.functionality = function(data) {};

    Command.prototype.hasPrivelege = function() {
      var user;
      user = data.users[this.msgData.fromID].getUser();
      switch (this.rankPrivelege) {
         case 'host':
          return user.permission === 5;
        case 'cohost':
          return user.permission >= 4;
        case 'mod':
          return user.permission >= 3;
        case 'manager':
          return user.permission >= 3;
        case 'bouncer':
          return user.permission >= 2;
        case 'featured':
          return user.permission >= 1;
        default:
          return true;
      }
    };

    Command.prototype.commandMatch = function() {
      var command, msg, _i, _len, _ref;
      msg = this.msgData.message;
      if (typeof this.command === 'string') {
        if (this.parseType === 'exact') {
          if (msg === this.command) {
            return true;
          } else {
            return false;
          }
        } else if (this.parseType === 'startsWith') {
          if (msg.substr(0, this.command.length) === this.command) {
            return true;
          } else {
            return false;
          }
        } else if (this.parseType === 'contains') {
          if (msg.indexOf(this.command) !== -1) {
            return true;
          } else {
            return false;
          }
        }
      } else if (typeof this.command === 'object') {
        _ref = this.command;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          command = _ref[_i];
          if (this.parseType === 'exact') {
            if (msg === command) {
              return true;
            }
          } else if (this.parseType === 'startsWith') {
            if (msg.substr(0, command.length) === command) {
              return true;
            }
          } else if (this.parseType === 'contains') {
            if (msg.indexOf(command) !== -1) {
              return true;
            }
          }
        }
        return false;
      }
    };

    Command.prototype.evalMsg = function() {
      if (this.commandMatch() && this.hasPrivelege()) {
        this.functionality();
        return true;
      } else {
        return false;
      }
    };

    return Command;

  })();

  cookieCommand = (function(_super) {
    __extends(cookieCommand, _super);

    function cookieCommand() {
      _ref = cookieCommand.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    cookieCommand.prototype.init = function() {
      this.command = 'cookie';
      this.parseType = 'startsWith';
      return this.rankPrivelege = 'featured';
    };

    cookieCommand.prototype.getCookie = function() {
      var c, cookies;
      cookies = ["muita aveia", "um cafesinho", "um toddynho", "um copo de coca-cola", "uma dose de Ipioca", "limões", "um danoninho", "um cafe extra forte", "maçãs", "bananas", "um brinquedinho", "amendoins", "muita aveia"];
      c = Math.floor(Math.random() * cookies.length);
      return cookies[c];
    };

    cookieCommand.prototype.functionality = function() {
      var msg, r, user;
      msg = this.msgData.message;
      r = new RoomHelper();
      if (msg.substring(7, 8) === "@") {
        user = r.lookupUser(msg.substr(8));
        if (user === false) {
          API.sendChat("/em: não encontrei ' " + msg.substr(8) +  "' na sala. Então, sobra mais pra mim! d(>_<)b ");
          return false;
        } else {
          return API.sendChat("/em: @" + user.username + ", @" + this.msgData.from + " o recompensou com " + this.getCookie() + ".  Aproveite!");
        }
      }
    };

    return cookieCommand;

  })(Command);

  newSongsCommand = (function(_super) {
    __extends(newSongsCommand, _super);

    function newSongsCommand() {
      _ref1 = newSongsCommand.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    newSongsCommand.prototype.init = function() {
      this.command = '!musicanova';
      this.parseType = 'startsWith';
      return this.rankPrivelege = 'featured';
    };

    newSongsCommand.prototype.functionality = function() {
      var arts, cMedia, chans, chooseRandom, mChans, msg, selections, u, _ref2;
      mChans = this.memberChannels.slice(0);
      chans = this.channels.slice(0);
      arts = this.artists.slice(0);
      chooseRandom = function(list) {
        var l, r;
        l = list.length;
        r = Math.floor(Math.random() * l);
        return list.splice(r, 1);
      };
      selections = {
        channels: [],
        artist: ''
      };
      u = data.users[this.msgData.fromID].getUser().username;
      if (u.indexOf("MistaDubstep") !== -1) {
        selections['channels'].push('MistaDubstep');
      } else if (u.indexOf("Underground Promotions") !== -1) {
        selections['channels'].push('UndergroundDubstep');
      } else {
        selections['channels'].push(chooseRandom(mChans));
      }
      selections['channels'].push(chooseRandom(chans));
      selections['channels'].push(chooseRandom(chans));
      cMedia = API.getMedia();
      if ((cMedia != null) && (_ref2 = cMedia.author, __indexOf.call(arts, _ref2) >= 0)) {
        selections['artist'] = cMedia.author;
      } else {
        selections['artist'] = chooseRandom(arts);
      }
      msg = "Everyone's heard that " + selections['artist'] + " track! Get new music from http://youtube.com/" + selections['channels'][0] + " http://youtube.com/" + selections['channels'][1] + " or http://youtube.com/" + selections['channels'][2];
      return API.sendChat(msg);
    };

    newSongsCommand.prototype.memberChannels = ["MistaDubstep", "DubStationPromotions", "UndergroundDubstep", "JesusDied4Dubstep", "DarkstepWarrior", "BombshockDubstep", "Sharestep"];

    newSongsCommand.prototype.channels = ["BassRape", "MonstercatMedia", "UKFdubstep", "DropThatBassline", "VitalDubstep", "AirwaveDubstepTV", "InspectorDubplate", "TehDubstepChannel", "UNITEDubstep", "LuminantNetwork", "TheSoundIsle", "PandoraMuslc", "MrSuicideSheep", "HearTheSensation", "bassoutletpromos", "MistaDubstep", "DubStationPromotions", "UndergroundDubstep", "JesusDied4Dubstep", "DarkstepWarrior", "BombshockDubstep", "Sharestep"];

    newSongsCommand.prototype.artists = ["Doctor P", "Excision", "Flux Pavilion", "Knife Party", "Rusko", "Bassnectar", "Nero", "Deadmau5", "Borgore", "Zomboy"];

    return newSongsCommand;

  })(Command);

  whyWootCommand = (function(_super) {
    __extends(whyWootCommand, _super);

    function whyWootCommand() {
      _ref2 = whyWootCommand.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    whyWootCommand.prototype.init = function() {
      this.command = '!JUNINHO';
      this.parseType = 'startsWith';JUNINHO
      return this.rankPrivelege = 'featured';
    };

    whyWootCommand.prototype.functionality = function() {
      var msg, nameIndex;
      msg = "Se tu não seguir as regras e parar de graçinhas, vai tomar um ban!";;
      if ((nameIndex = this.msgData.message.indexOf('@')) !== -1) {
        return API.sendChat(this.msgData.message.substr(nameIndex) + ', ' + msg);
      } else {
        return API.sendChat(msg);
      }
    };

    return whyWootCommand;

  })(Command);

  themeCommand = (function(_super) {
    __extends(themeCommand, _super);

    function themeCommand() {
      _ref3 = themeCommand.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    themeCommand.prototype.init = function() {
      this.command = '!temas';
      this.parseType = 'startsWith';
      return this.rankPrivelege = 'featured';
    };

    themeCommand.prototype.functionality = function() {
      var msg1, msg2;
      msg1 = "Todo tipo de musica eletronica de boa qualidade é permitida aqui. Incluindo Electro, Dubstep, Techno, Trap, EDM, ";
      msg1 += "Hardstyle, House e Trance. ";
      msg2 = "All kinds of electronic song of good quality is allowed here. Including Electro, Dubstep, Techno, Trap, EDM, ";
      msg2 += "Hardstyle, House and Trance. ";	  
      API.sendChat(msg1);
	  return setTimeout((function() {
        return API.sendChat(msg2);
      }), 750);
	  
    };

    return themeCommand;

  })(Command);

  rulesCommand = (function(_super) {
    __extends(rulesCommand, _super);

    function rulesCommand() {
      _ref4 = rulesCommand.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    rulesCommand.prototype.init = function() {
      this.command = '!regras';
      this.parseType = 'startsWith';
      return this.rankPrivelege = 'featured';
    };

    rulesCommand.prototype.functionality = function() {
      var msg1, msg2;
       msg1 = "1) Tempo máximo 5 min e 30 seg. ";
      msg1 += "2) Não escrever em /me ou /em.  ";
      msg1 += "3) Respeitar os moderadores da sala.";
      msg1 += "4) Sem flood no chat . ";
      msg1 += "5) Proibido usar FanBot na sala ";
      msg2 = "1) Maximum time 5 minutes and 30 seconds. ";
      msg2 += "2) Can't write in /me or /em. ";
      msg2 += "3) Respect the moderators of the room. ";
      msg2 += "4) Without flood in the chat. ";
      msg2 += "5) Can't ask positions ";
      API.sendChat(msg1);
      return setTimeout((function() {
        return API.sendChat(msg2);
      }), 750);
    };

    return rulesCommand;

  })(Command);

  roomHelpCommand = (function(_super) {
    __extends(roomHelpCommand, _super);

    function roomHelpCommand() {
      _ref4 = roomHelpCommand.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    roomHelpCommand.prototype.init = function() {
      this.command = '!roomhelp';
      this.parseType = 'startsWith';
      return this.rankPrivelege = 'featured';
    };

    roomHelpCommand.prototype.functionality = function() {
      var msg1, msg2;

      msg1 = "Bem vindo a sala ♫ᕮᒪᕮƬᖇ〇 Ƭᖇᗩᑭ & ÐᑌᙖᔕƬᕮᑭ♫ ზ ! ETD , Ser DJ: Crie uma lista de reprodução e coloque Musica do Youtube ou soundcloud. ";
      msg1 += "Se é novo procure pelo seu nome na sua tela (próximo a cabine do DJ) e depois mude o nome. ";
      msg1 += "Para Ganhar Pontos clique em Bacana. ";
      msg2 = "Divirta-se! Qualquer outra duvida chame um adm da sala ";
      API.sendChat(msg1);
      return setTimeout((function() {
        return API.sendChat(msg2);
      }), 750);
    };

    return roomHelpCommand;

  })(Command);

  sourceCommand = (function(_super) {
    __extends(sourceCommand, _super);

    function sourceCommand() {
      _ref6 = sourceCommand.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    sourceCommand.prototype.init = function() {
      this.command = ['!autor', '!author', '!autor'];
      this.parseType = 'exact';
      return this.rankPrivelege = 'featured';
    };

    sourceCommand.prototype.functionality = function() {
      var msg;
      msg = ' BOT criado por JuninhoxD para ajudar a moderar sua sala! ';
      return API.sendChat(msg);
    };

    return sourceCommand;

  })(Command);

  wootCommand = (function(_super) {
    __extends(wootCommand, _super);

    function wootCommand() {
      _ref7 = wootCommand.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    wootCommand.prototype.init = function() {
      this.command = '!autowoot';
      this.parseType = 'startsWith';
      return this.rankPrivelege = 'featured';
    };

    wootCommand.prototype.functionality = function() {
      var msg, nameIndex;
      msg = "Use o auto woot para evitar remoção da cabine de DJ por não estar votando. http://migre.me/fCWA2";
      if ((nameIndex = this.msgData.message.indexOf('@')) !== -1) {
        return API.sendChat(this.msgData.message.substr(nameIndex) + ', ' + msg);
      } else {
        return API.sendChat(msg);
      }
    };

    return wootCommand;

  })(Command);

  badQualityCommand = (function(_super) {
    __extends(badQualityCommand, _super);

    function badQualityCommand() {
      _ref8 = badQualityCommand.__super__.constructor.apply(this, arguments);
      return _ref8;
    }

    badQualityCommand.prototype.init = function() {
      this.command = '.ruim';
      this.parseType = 'exact';
      return this.rankPrivelege = 'bouncer';
    };

    badQualityCommand.prototype.functionality = function() {
      var msg;
      msg = "Não gostei da sua musica, tente melhorar da proxima vez";
      return API.sendChat(msg);
    };

    return badQualityCommand;

  })(Command);

  downloadCommand = (function(_super) {
    __extends(downloadCommand, _super);

    function downloadCommand() {
      _ref9 = downloadCommand.__super__.constructor.apply(this, arguments);
      return _ref9;
    }

    downloadCommand.prototype.init = function() {
      this.command = '!ETD ';
      this.parseType = 'exact';
      return this.rankPrivelege = 'featured';
    };

    downloadCommand.prototype.functionality = function() {
      var msg;
      msg = " Participe do grupo ";
      msg += " Não temos um grupo especifico, aguarde que em breve teremos ";
      return API.sendChat(msg);
    };

    return downloadCommand;

  })(Command);

  afksCommand = (function(_super) {
    __extends(afksCommand, _super);

    function afksCommand() {
      _ref5 = afksCommand.__super__.constructor.apply(this, arguments);
      return _ref10;
    }

    afksCommand.prototype.init = function() {
      this.command = '!afks';
      this.parseType = 'exact';
      return this.rankPrivelege = 'mod';
    };

    afksCommand.prototype.functionality = function() {
      var dj, djAfk, djs, msg, now, _i, _len;

      msg = '';
      djs = API.getDJs();
      for (_i = 0, _len = djs.length; _i < _len; _i++) {
        dj = djs[_i];
        now = new Date();
        djAfk = now.getTime() - data.users[dj.id].getLastActivity().getTime();
        if (djAfk > (5 * 60 * 1000)) {
          if (msToStr(djAfk) !== false) {
            msg += dj.username + ' - ' + msToStr(djAfk);
            msg += '. ';
          }
        }
      }
      if (msg === '') {
        return API.sendChat("Ninguem está AFK :D !");
      } else {
        return API.sendChat('AFKs: ' + msg);
      }
    };

    return afksCommand;

  })(Command);

  allAfksCommand = (function(_super) {
    __extends(allAfksCommand, _super);

    function allAfksCommand() {
      _ref6 = allAfksCommand.__super__.constructor.apply(this, arguments);
      return _ref11;
    }

    allAfksCommand.prototype.init = function() {
      this.command = '!allafks';
      this.parseType = 'exact';
      return this.rankPrivelege = 'mod';
    };

    allAfksCommand.prototype.functionality = function() {
      var msg, now, u, uAfk, usrs, _i, _len;

      msg = '';
      usrs = API.getUsers();
      for (_i = 0, _len = usrs.length; _i < _len; _i++) {
        u = usrs[_i];
        now = new Date();
        uAfk = now.getTime() - data.users[u.id].getLastActivity().getTime();
        if (uAfk > (10 * 60 * 1000)) {
          if (msToStr(uAfk) !== false) {
            msg += u.username + ' - ' + msToStr(uAfk);
            msg += '. ';
          }
        }
      }
      if (msg === '') {
        return API.sendChat("Nobody appears to be AFK!");
      } else {
        return API.sendChat('AFKs: ' + msg);
      }
    };

    return allAfksCommand;

  })(Command);

  statusCommand = (function(_super) {
    __extends(statusCommand, _super);

    function statusCommand() {
      _ref7 = statusCommand.__super__.constructor.apply(this, arguments);
      return _ref12;
    }

    statusCommand.prototype.init = function() {
      this.command = '!status';
      this.parseType = 'exact';
      return this.rankPrivelege = 'bouncer';
    };

    statusCommand.prototype.functionality = function() {
      var day, hour, launch, lt, meridian, min, month, msg, t, totals;

      lt = data.launchTime;
      month = lt.getMonth() + 1;
      day = lt.getDate();
      hour = lt.getHours();
      meridian = hour % 12 === hour ? 'AM' : 'PM';
      min = lt.getMinutes();
      min = min < 10 ? '0' + min : min;
      t = data.totalVotingData;
      t['songs'] = data.songCount;
      launch = 'Started ' + month + '/' + day + ' ' + hour + ':' + min + ' ' + meridian + '. ';
      totals = '' + t.songs + ' songs have been played, accumulating ' + t.woots + ' woots, ' + t.mehs + ' mehs, and ' + t.curates + ' queues.';
      msg = launch + totals;
      return API.sendChat(msg);
    };

    return statusCommand;


  })(Command);

  unhookCommand = (function(_super) {
    __extends(unhookCommand, _super);

    function unhookCommand() {
      _ref13 = unhookCommand.__super__.constructor.apply(this, arguments);
      return _ref13;
    }

    unhookCommand.prototype.init = function() {
      this.command = '!unhook events all()';
      this.parseType = 'exact';
      return this.rankPrivelege = 'host';
    };

    unhookCommand.prototype.functionality = function() {
      API.sendChat('Unhooking all events...');
      return undoHooks();
    };

    return unhookCommand;

  })(Command);

  dieCommand = (function(_super) {
    __extends(dieCommand, _super);

    function dieCommand() {
      _ref8 = dieCommand.__super__.constructor.apply(this, arguments);
      return _ref14;
    }

    dieCommand.prototype.init = function() {
      this.command = '!morra';
      this.parseType = 'exact';
      return this.rankPrivelege = 'mod';
    };

    dieCommand.prototype.functionality = function() {
      API.sendChat("What are you doing!");
      undoHooks();
      API.sendChat("pls stahp");
      data.implode();
      return API.sendChat("I thought we were friends x_x");
    };

    return dieCommand;

  })(Command);

  reloadCommand = (function(_super) {
    __extends(reloadCommand, _super);

    function reloadCommand() {
      _ref9 = reloadCommand.__super__.constructor.apply(this, arguments);
      return _ref15;
    }

    reloadCommand.prototype.init = function() {
      this.command = '!reload';
      this.parseType = 'exact';
      return this.rankPrivelege = 'manager';
    };

    reloadCommand.prototype.functionality = function() {
      var pupSrc;

      API.sendChat('ChatBot Reloaded');
      undoHooks();
      pupSrc = data.pupScriptUrl;
      data.implode();
      return $.getScript(pupSrc);
    };

    return reloadCommand;

  })(Command);

  lockCommand = (function(_super) {
    __extends(lockCommand, _super);

    function lockCommand() {
      _ref16 = lockCommand.__super__.constructor.apply(this, arguments);
      return _ref16;
    }

    lockCommand.prototype.init = function() {
      this.command = '!trava';
      this.parseType = 'exact';
      return this.rankPrivelege = 'bouncer';
    };

    lockCommand.prototype.functionality = function() {
      return data.lockBooth();
    };

    return lockCommand;

  })(Command);

  unlockCommand = (function(_super) {
    __extends(unlockCommand, _super);

    function unlockCommand() {
      _ref17 = unlockCommand.__super__.constructor.apply(this, arguments);
      return _ref17;
    }

    unlockCommand.prototype.init = function() {
      this.command = '!destrava';
      this.parseType = 'exact';
      return this.rankPrivelege = 'bouncer';
    };

    unlockCommand.prototype.functionality = function() {
      return data.unlockBooth();
    };

    return unlockCommand;
	
  })(Command);

  removeCommand = (function(_super) {
    __extends(removeCommand, _super);

    function removeCommand() {
      _ref33 = removeCommand.__super__.constructor.apply(this, arguments);
      return _ref33;
    }

    removeCommand.prototype.init = function() {
      this.command = '!remover';
      this.parseType = 'startsWith';
      return this.rankPrivelege = 'bouncer';
    };

    removeCommand.prototype.functionality = function() {
      var djs, popDj;

      djs = API.getDJs();
      popDj = djs[djs.length - 1];
      return API.moderateRemoveDJ(popDj.id);
    };

    return removeCommand;
	 
	 })(Command);

  staffCommand = (function(_super) {
    __extends(staffCommand, _super);

    function staffCommand() {
      _ref32 = staffCommand.__super__.constructor.apply(this, arguments);
      return _ref32;
    }

    staffCommand.prototype.init = function() {
      this.command = '!staff';
      this.parseType = 'exact';
      this.rankPrivelege = 'user';
      return window.lastActiveStaffTime;
    };
	
    staffCommand.prototype.staff = function() {
      var now, staff, staffAfk, stringstaff, user, _i, _len;

      staff = API.getStaff();
      now = new Date();
      stringstaff = "";
      for (_i = 0, _len = staff.length; _i < _len; _i++) {
        user = staff[_i];
        if (user.permission > 1) {
          staffAfk = now.getTime() - data.users[user.id].getLastActivity().getTime();
          if (staffAfk < (60 * 60 * 1000)) {
            stringstaff += "@" + user.username + " ";
          }
        }
      }
      if (stringstaff.length === 0) {
        stringstaff = "Não ha ADMs ativos no momento :'(";
      }
      return stringstaff;
    };

    staffCommand.prototype.functionality = function() {
      var currentTime, millisecondsPassed, thestaff;

      thestaff = this.staff();
      currentTime = new Date();
      if (!window.lastActiveStaffTime) {
        API.sendChat(thestaff);
        return window.lastActiveStaffTime = currentTime;
      } else {
        millisecondsPassed = currentTime.getTime() - window.lastActiveStaffTime.getTime();
        if (millisecondsPassed > 10000) {
          window.lastActiveStaffTime = currentTime;
          return API.sendChat(thestaff);
        }
      }
    };

    return staffCommand;
	
  })(Command);

  lockskipCommand = (function(_super) {
    __extends(lockskipCommand, _super);

    function lockskipCommand() {
      _ref34 = lockskipCommand.__super__.constructor.apply(this, arguments);
      return _ref34;
    }

    lockskipCommand.prototype.init = function() {
      this.command = '!lockskip';
      this.parseType = 'startsWith';
      return this.rankPrivelege = 'bouncer';
    };

    lockskipCommand.prototype.functionality = function() {
      return data.lockBooth(function() {
        return setTimeout(function() {}, API.moderateForceSkip(), setTimeout(function() {
          return data.unlockBooth();
        }, 5000), 5000);
      });
    };

    return lockskipCommand;
		 
	 })(Command);

  addCommand = (function(_super) {
    __extends(addCommand, _super);

    function addCommand() {
      _ref35 = addCommand.__super__.constructor.apply(this, arguments);
      return _ref35;
    }

    addCommand.prototype.init = function() {
      this.command = '!add';
      this.parseType = 'startsWith';
      return this.rankPrivelege = 'bouncer';
    };

    addCommand.prototype.functionality = function() {
      var msg, name, r, user;

      msg = this.msgData.message;
      if (msg.length > this.command.length + 2) {
        name = msg.substr(this.command.length + 2);
        r = new RoomHelper();
        user = r.lookupUser(name);
        if (user !== false) {
          API.moderateAddDJ(user.id);
          return setTimeout((function() {
            return data.unlockBooth();
          }), 5000);
        }
      }
    };

    return addCommand;

  })(Command);

  swapCommand = (function(_super) {
    __extends(swapCommand, _super);

    function swapCommand() {
      _ref18 = swapCommand.__super__.constructor.apply(this, arguments);
      return _ref18;
    }

    swapCommand.prototype.init = function() {
      this.command = '!swap';
      this.parseType = 'startsWith';
      return this.rankPrivelege = 'bouncer';
    };

    swapCommand.prototype.functionality = function() {
      var msg, r, swapRegex, userAdd, userRemove, users;
      msg = this.msgData.message;
      swapRegex = new RegExp("^!swap @(.+) para @(.+)$");
      users = swapRegex.exec(msg).slice(1);
      r = new RoomHelper();
      if (users.length === 2) {
        userRemove = r.lookupUser(users[0]);
        userAdd = r.lookupUser(users[1]);
        if (userRemove === false || userAdd === false) {
          API.sendChat('Ha algum erro');
          return false;
        } else {
          return data.lockBooth(function() {
            API.moderateRemoveDJ(userRemove.id);
            API.sendChat("Removendo " + userRemove.username + "...");
            return setTimeout(function() {
              API.moderateAddDJ(userAdd.id);
              API.sendChat("Adicionando " + userAdd.username + "...");
              return setTimeout(function() {
                return data.unlockBooth();
              }, 1500);
            }, 1500);
          });
        }
      } else {
        return API.sendChat("Tire o espaço entre os nomes e coloque \'para\'");
      }
    };

    return swapCommand;

  })(Command);

  popCommand = (function(_super) {
    __extends(popCommand, _super);

    function popCommand() {
      _ref19 = popCommand.__super__.constructor.apply(this, arguments);
      return _ref19;
    }

    popCommand.prototype.init = function() {
      this.command = '!pop';
      this.parseType = 'exact';
      return this.rankPrivelege = 'mod';
    };

    popCommand.prototype.functionality = function() {
      var djs, popDj;
      djs = API.getDJs();
      popDj = djs[djs.length - 1];
      return API.moderateRemoveDJ(popDj.id);
    };

    return popCommand;

  })(Command);

  pushCommand = (function(_super) {
    __extends(pushCommand, _super);

    function pushCommand() {
      _ref20 = pushCommand.__super__.constructor.apply(this, arguments);
      return _ref20;
    }

    pushCommand.prototype.init = function() {
      this.command = '!push';
      this.parseType = 'startsWith';
      return this.rankPrivelege = 'mod';
    };

    pushCommand.prototype.functionality = function() {
      var msg, name, r, user;
      msg = this.msgData.message;
      if (msg.length > this.command.length + 2) {
        name = msg.substr(this.command.length + 2);
        r = new RoomHelper();
        user = r.lookupUser(name);
        if (user !== false) {
          return API.moderateAddDJ(user.id);
        }
      }
    };

    return pushCommand;

  })(Command);

  resetAfkCommand = (function(_super) {
    __extends(resetAfkCommand, _super);

    function resetAfkCommand() {
      _ref21 = resetAfkCommand.__super__.constructor.apply(this, arguments);
      return _ref21;
    }

    resetAfkCommand.prototype.init = function() {
      this.command = '!resetafk';
      this.parseType = 'startsWith';
      return this.rankPrivelege = 'mod';
    };

    resetAfkCommand.prototype.functionality = function() {
      var id, name, u, _ref22;
      if (this.msgData.message.length > 10) {
        name = this.msgData.message.substring(11);
        _ref22 = data.users;
        for (id in _ref22) {
          u = _ref22[id];
          if (u.getUser().username === name) {
            u.updateActivity();
            API.sendChat('@' + u.getUser().username + ' seu tempo AFK foi reiniciado.');
            return;
          }
        }
        API.sendChat('' + name + ' Não pode ser encontrado');
      } else {
        API.sendChat('Mas, wat?');
      }
    };

    return resetAfkCommand;

  })(Command);

  forceSkipCommand = (function(_super) {
    __extends(forceSkipCommand, _super);

    function forceSkipCommand() {
      _ref22 = forceSkipCommand.__super__.constructor.apply(this, arguments);
      return _ref22;
    }

    forceSkipCommand.prototype.init = function() {
      this.command = '!forceskip';
      this.parseType = 'startsWith';
      return this.rankPrivelege = 'cohost';
    };

    forceSkipCommand.prototype.functionality = function() {
      var msg, param;
      msg = this.msgData.message;
      if (msg.length > 11) {
        param = msg.substr(11);
        if (param === 'Ativar') {
          data.forceSkip = true;
          return API.sendChat("Pulo forçado ativado.");
        } else if (param === 'Desativar') {
          data.forceSkip = false;
          return API.sendChat("Pulo forçado desativado.");
        }
      }
    };

    return forceSkipCommand;

  })(Command);

  overplayedCommand = (function(_super) {
    __extends(overplayedCommand, _super);

    function overplayedCommand() {
      _ref23 = overplayedCommand.__super__.constructor.apply(this, arguments);
      return _ref23;
    }

    overplayedCommand.prototype.init = function() {
      this.command = '!overplayed';
      this.parseType = 'exact';
      return this.rankPrivelege = 'bouncer';
    };

    overplayedCommand.prototype.functionality = function() {
      return API.sendCha("Acho que não, em?");
    };

    return overplayedCommand;

  })(Command);

  uservoiceCommand = (function(_super) {
    __extends(uservoiceCommand, _super);

    function uservoiceCommand() {
      _ref24 = uservoiceCommand.__super__.constructor.apply(this, arguments);
      return _ref24;
    }

    uservoiceCommand.prototype.init = function() {
      this.command = ['!uservoice()', '!idea()'];
      this.parseType = 'exact';
      return this.rankPrivelege = 'cohost';
    };

    uservoiceCommand.prototype.functionality = function() {
      var msg;
      msg = 'Have an idea for the room, our bot, or an event?  Awesome! Submit it to our uservoice and we\'ll get started on it: ';
      msg += ' (please don\'t ask for mod)';
      return API.sendChat(msg);
    };

    return uservoiceCommand;

  })(Command);

  skipCommand = (function(_super) {
    __extends(skipCommand, _super);

    function skipCommand() {
      _ref25 = skipCommand.__super__.constructor.apply(this, arguments);
      return _ref25;
    }

    skipCommand.prototype.init = function() {
      this.command = '!skip';
      this.parseType = 'exact';
      this.rankPrivelege = 'bouncer';
      return window.lastSkipTime;
    };

    skipCommand.prototype.functionality = function() {
      var currentTime, millisecondsPassed;

      currentTime = new Date();
      if (!window.lastSkipTime) {
        API.moderateForceSkip();
        return window.lastSkipTime = currentTime;
      } else {
        millisecondsPassed = Math.round(currentTime.getTime() - window.lastSkipTime.getTime());
        if (millisecondsPassed > 10000) {
          window.lastSkipTime = currentTime;
          return API.moderateForceSkip();
        }
      }
    };

    return skipCommand;

  })(Command);

  whyMehCommand = (function(_super) {
    __extends(whyMehCommand, _super);

    function whyMehCommand() {
      _ref26 = whyMehCommand.__super__.constructor.apply(this, arguments);
      return _ref26;
    }

    whyMehCommand.prototype.init = function() {
      this.command = '!cotas';
      this.parseType = 'exact';
      return this.rankPrivelege = 'bouncer';
    };

    whyMehCommand.prototype.functionality = function() {
      var msg;
      msg = "/em acaba de ativar o modo cotas! ";
      msg += "Roubou sua vaga na faculdade, suas mulheres e sua vez na cabine de DJ";
      return API.sendChat(msg);
    };

    return whyMehCommand;

  })(Command);

  commandsCommand = (function(_super) {
    __extends(commandsCommand, _super);

    function commandsCommand() {
      _ref27 = commandsCommand.__super__.constructor.apply(this, arguments);
      return _ref27;
    }

    commandsCommand.prototype.init = function() {
      this.command = '!comandos';
      this.parseType = 'exact';
      return this.rankPrivelege = 'bouncer';
    };

    commandsCommand.prototype.functionality = function() {
      var allowedUserLevels, c, cc, cmd, msg, user, _i, _j, _len, _len1, _ref28, _ref29;
      allowedUserLevels = [];
      user = API.getUser(this.msgData.fromID);
      window.capturedUser = user;
      if (user.permission > 5) {
        allowedUserLevels = ['user', 'mod', 'host'];
      } else if (user.permission > 2) {
        allowedUserLevels = ['user', 'mod'];
      } else {
        allowedUserLevels = ['user'];
      }
      msg = '';
      for (_i = 0, _len = cmds.length; _i < _len; _i++) {
        cmd = cmds[_i];
        c = new cmd('');
        if (_ref28 = c.rankPrivelege, __indexOf.call(allowedUserLevels, _ref28) >= 0) {
          if (typeof c.command === "string") {
            msg += c.command + ', ';
          } else if (typeof c.command === "object") {
            _ref29 = c.command;
            for (_j = 0, _len1 = _ref29.length; _j < _len1; _j++) {
              cc = _ref29[_j];
              msg += cc + ', ';
            }
          }
        }
      }
      msg = msg.substring(0, msg.length - 2);
      return API.sendChat(msg);
    };

    return commandsCommand;

  })(Command);

  disconnectLookupCommand = (function(_super) {
    __extends(disconnectLookupCommand, _super);

    function disconnectLookupCommand() {
      _ref28 = disconnectLookupCommand.__super__.constructor.apply(this, arguments);
      return _ref28;
    }

    disconnectLookupCommand.prototype.init = function() {
      this.command = '!dcmembros';
      this.parseType = 'startsWith';
      return this.rankPrivelege = 'bouncer';
    };

    disconnectLookupCommand.prototype.functionality = function() {
      var cmd, dcHour, dcLookupId, dcMeridian, dcMins, dcSongsAgo, dcTimeStr, dcUser, disconnectInstances, givenName, id, recentDisconnect, resp, u, _i, _len, _ref16, _ref17;

      cmd = this.msgData.message;
      if (cmd.length > 11) {
        givenName = cmd.slice(11);
        _ref16 = data.users;
        for (id in _ref29) {
          u = _ref29[id];
          if (u.getUser().username === givenName) {
            dcLookupId = id;
            disconnectInstances = [];
            _ref17 = data.userDisconnectLog;
            for (_i = 0, _len = _ref17.length; _i < _len; _i++) {
              dcUser = _ref30[_i];
              if (dcUser.id === dcLookupId) {
                disconnectInstances.push(dcUser);
              }
            }
            if (disconnectInstances.length > 0) {
              resp = u.getUser().username + ' desconectou ' + disconnectInstances.length.toString() + ' vez';
              if (disconnectInstances.length === 1) {
                resp += '. ';
              } else {
                resp += 'es. ';
              }
              recentDisconnect = disconnectInstances.pop();
              dcHour = recentDisconnect.time.getHours();
              dcMins = recentDisconnect.time.getMinutes();
              if (dcMins < 10) {
                dcMins = '0' + dcMins.toString();
              }
              dcMeridian = dcHour % 12 === dcHour ? 'AM' : 'PM';
              dcTimeStr = '' + dcHour + ':' + dcMins + ' ' + dcMeridian;
              dcSongsAgo = data.songCount - recentDisconnect.songCount;
              resp += 'Sua desconexão mais recente foi as ' + dcTimeStr + ' (' + dcSongsAgo + ' músicas atras). ';
              if (recentDisconnect.waitlistPosition !== void 0) {
                resp += 'Ele estava ' + recentDisconnect.waitlistPosition + ' músicas';
                if (recentDisconnect.waitlistPosition > 1) {
                  resp += 's';
                }
                resp += ' antes da cabine de DJ.';
              } else {
                resp += 'Ele não estava na cabine de dj ou na lista de espera.';
              }
              API.sendChat(resp);
              return;
            } else {
              API.sendChat("" + u.getUser().username + " não desconectou.");
              return;
            }
          }
        }
        return API.sendChat("'Este nome " + givenName + " não pode ser encontrado'.");
      }
    };

    return disconnectLookupCommand;

  })(Command);

  voteRatioCommand = (function(_super) {
    __extends(voteRatioCommand, _super);

    function voteRatioCommand() {
      _ref29 = voteRatioCommand.__super__.constructor.apply(this, arguments);
      return _ref29;
    }

    voteRatioCommand.prototype.init = function() {
      this.command = '!voteratio';
      this.parseType = 'startsWith';
      return this.rankPrivelege = 'bouncer';
    };

    voteRatioCommand.prototype.functionality = function() {
      var msg, name, r, u, votes;

      r = new RoomHelper();
      msg = this.msgData.message;
      if (msg.length > 12) {
        name = msg.substr(12);
        u = r.lookupUser(name);
        if (u !== false) {
          votes = r.userVoteRatio(u);
          msg = u.username + " :+1: " + votes['woot'].toString() + " vezes";
          if (votes['woot'] === 1) {
            msg += ', ';
          } else {
            msg += 's, ';
          }
          msg += "e :-1: " + votes['meh'].toString() + " vezes";
          if (votes['meh'] === 1) {
            msg += '. ';
          } else {
            msg += 's. ';
          }
          msg += "O seu voteratio é: " + votes['positiveRatio'].toString() + ".";
          return API.sendChat(msg);
        } else {
          return API.sendChat("Este nome' " + name +  " não pode ser encontrado'");
        }
      } else {
        return API.sendChat("Faça isso direito, newbie!");
      }
    };

    return voteRatioCommand;

  })(Command);

  avgVoteRatioCommand = (function(_super) {
    __extends(avgVoteRatioCommand, _super);

    function avgVoteRatioCommand() {
      _ref30 = avgVoteRatioCommand.__super__.constructor.apply(this, arguments);
      return _ref30;
    }

    avgVoteRatioCommand.prototype.init = function() {
      this.command = '!avgvoteratio';
      this.parseType = 'exact';
      return this.rankPrivelege = 'bouncer';
    };

    avgVoteRatioCommand.prototype.functionality = function() {
      var averageRatio, msg, r, ratio, roomRatios, uid, user, userRatio, votes, _i, _len, _ref18;

      roomRatios = [];
      r = new RoomHelper();
      _ref18 = data.voteLog;
      for (uid in _ref31) {
        votes = _ref31[uid];
        user = data.users[uid].getUser();
        userRatio = r.userVoteRatio(user);
        roomRatios.push(userRatio['positiveRatio']);
      }
      averageRatio = 0.0;
      for (_i = 0, _len = roomRatios.length; _i < _len; _i++) {
        ratio = roomRatios[_i];
        averageRatio += ratio;
      }
      averageRatio = averageRatio / roomRatios.length;
      msg = "Contabilidade de " + roomRatios.length.toString() + " votos por usuário, e a taxa média da sala é de " + averageRatio.toFixed(2).toString() + " votos.";
      return API.sendChat(msg);
    };

    return avgVoteRatioCommand;

  })(Command);

  cmds = [cookieCommand, newSongsCommand, whyWootCommand, themeCommand, rulesCommand, roomHelpCommand, sourceCommand, wootCommand, badQualityCommand, downloadCommand, afksCommand, allAfksCommand, statusCommand, unhookCommand, dieCommand, reloadCommand, lockCommand, unlockCommand, swapCommand, popCommand, pushCommand, overplayedCommand, uservoiceCommand, whyMehCommand, skipCommand, commandsCommand, resetAfkCommand, forceSkipCommand, disconnectLookupCommand, voteRatioCommand, avgVoteRatioCommand];

  chatCommandDispatcher = function(chat) {
    var c, cmd, _i, _len, _results;
    chatUniversals(chat);
    _results = [];
    for (_i = 0, _len = cmds.length; _i < _len; _i++) {
      cmd = cmds[_i];
      c = new cmd(chat);
      if (c.evalMsg()) {
        break;
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  updateVotes = function(obj) {
    data.currentwoots = obj.positive;
    data.currentmehs = obj.negative;
    return data.currentcurates = obj.curates;
  };

  announceCurate = function(obj) {
    return announceCurate;
  };

  handleUserJoin = function(user) {
    data.userJoin(user);
    data.users[user.id].updateActivity();
    return handleUserJoin;
  };

  handleNewSong = function(obj) {
    var songId;
    data.intervalMessages();
    if (data.currentsong === null) {
      data.newSong();
    } else {
      data.newSong();
      document.getElementById("button-vote-positive").click();
    }
    if (data.forceSkip) {
      songId = obj.media.id;
      return setTimeout(function() {
        var cMedia;
        cMedia = API.getMedia();
        if (cMedia.id === songId) {
          return API.moderateForceSkip();
        }
      }, obj.media.duration * 1000);
    }
  };

  handleVote = function(obj) {
    data.users[obj.user.id].updateActivity();
    return data.users[obj.user.id].updateVote(obj.vote);
  };

  handleUserLeave = function(user) {
    var disconnectStats, i, u, _i, _len, _ref31;
    disconnectStats = {
      id: user.id,
      time: new Date(),
      songCount: data.songCount
    };
    i = 0;
    _ref31 = data.internalWaitlist;
    for (_i = 0, _len = _ref31.length; _i < _len; _i++) {
      u = _ref31[_i];
      if (u.id === user.id) {
        disconnectStats['waitlistPosition'] = i - 1;
        data.setInternalWaitlist();
        break;
      } else {
        i++;
      }
    }
    data.userDisconnectLog.push(disconnectStats);
    return data.users[user.id].inRoom(false);
  };

  antispam = function(chat) {
    var plugRoomLinkPatt, sender;
    plugRoomLinkPatt = /(\bhttps?:\/\/(www.)?plug\.dj[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;
    if (plugRoomLinkPatt.exec(chat.message)) {
      sender = API.getUser(chat.fromID);
      if (!sender.ambassador && !sender.moderator && !sender.owner && !sender.superuser) {
        if (!data.users[chat.fromID]["protected"]) {
          API.sendChat("Sem spam");
          return API.moderateDeleteChat(chat.chatID);
        } else {
          return API.sendChat("Eu deveria expulsa-lo, mas estamos aqui para nos divertir");
       }
      }
    }
  };

   fans = function(chat) {
    var msg;

    msg = chat.message.toLowerCase();
    if (msg.indexOf('fan me') !== -1 || msg.indexOf(':trollface:') !== -1 || msg.indexOf('fan pls') !== -1 || msg.indexOf('fan4fan') !== -1 || msg.indexOf('add me to fan') !== -1 || msg.indexOf('autowoot:') !== -1) {
      return API.moderateDeleteChat(chat.chatID);
    }
  };
  
  beggar = function(chat) {
    var msg, r, responses;
    msg = chat.message.toLowerCase();
    responses = ["@{beggar}  ", "@{beggar} ", "@{beggar} ", "@{beggar} "];
    r = Math.floor(Math.random() * responses.length);
    if (msg.indexOf('¨¨¨¨') !== -1 || msg.indexOf('¨¨¨¨') !== -1 || msg.indexOf('¨¨¨¨') !== -1 || msg.indexOf('¨¨¨¨¨¨') !== -1 || msg.indexOf('¨¨¨¨¨¨') !== -1) {
      return API.sendChat(responses[r].replace("{beggar}", chat.from));
    }
  };

  chatUniversals = function(chat) {
    data.activity(chat);
    antispam(chat);
    return beggar(chat);
  };

  hook = function(apiEvent, callback) {
    return API.on(apiEvent, callback);
  };

  unhook = function(apiEvent, callback) {
    return API.off(apiEvent, callback);
  };

  apiHooks = [
    {
      'event': API.ROOM_SCORE_UPDATE,
      'callback': updateVotes
    }, {
      'event': API.CURATE_UPDATE,
      'callback': announceCurate
    }, {
      'event': API.USER_JOIN,
      'callback': handleUserJoin
    }, {
      'event': API.DJ_ADVANCE,
      'callback': handleNewSong
    }, {
      'event': API.VOTE_UPDATE,
      'callback': handleVote
    }, {
      'event': API.CHAT,
      'callback': chatCommandDispatcher
    }, {
      'event': API.USER_LEAVE,
      'callback': handleUserLeave
    }
  ];

  initHooks = function() {
    var pair, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = apiHooks.length; _i < _len; _i++) {
      pair = apiHooks[_i];
      _results.push(hook(pair['event'], pair['callback']));
    }
    return _results;
  };

  undoHooks = function() {
    var pair, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = apiHooks.length; _i < _len; _i++) {
      pair = apiHooks[_i];
      _results.push(unhook(pair['event'], pair['callback']));
    }
    return _results;
  };

  initialize();

}).call(this);


function showEmoji(e,t,n){$("#emoji_listfeed").append('<div class="emoji_feed"><strong>'+t+":</strong></div>");$("#emoji_listfeed").append('<div class="emoji_feed"><table style="width:100%;">');for(i=0;i<e.length;i++){if(i==0){$("#emoji_listfeed").append("<tr>")}var r=e[i];var s=r.replace("emojify","").trim();$("#emoji_listfeed").append('<td class="emoji_feed"><span id="'+n+"_"+i+'" onclick="paste(this)" ><img src="http://www.emoji-cheat-sheet.com/graphics/emojis/'+s+'.png" alt="'+i+'" style="cursor:pointer" title="'+s+'" /></span></td>');if(i%11==0&&i!=0&&i<12){$("#emoji_listfeed").append("</tr><tr>")}if((i+1)%12==0&&i>12){$("#emoji_listfeed").append("</tr><tr>")}}$("#emoji_listfeed").append("</tr></table></div>")}function paste(e){function s(e,t,n,s){if(e.indexOf(s)>=0){for(i=0;i<n.length;i++){if(i==t){var o=n[i];var u=o.replace("emojify","").trim();r=s;return u}}}else{return null}}var t=$(e).attr("id");var n=t.substring(2);var r;var o=s(t,n,emoticons,"e");var u=s(t,n,people,"p");var a=s(t,n,nature,"n");var f=s(t,n,objects,"o");var l=s(t,n,places,"l");var c=s(t,n,symbols,"s");switch(r){case"e":var h=":"+o+": ";break;case"p":var h=":"+u+": ";break;case"n":var h=":"+a+": ";break;case"o":var h=":"+f+": ";break;case"l":var h=":"+l+": ";break;case"s":var h=":"+c+": ";break;default:alert("FATAL ERROR!");break}var p=document.getElementById("chat-input-field").value;document.getElementById("chat-input-field").value=p+" "+h;document.getElementById("chat-input-field").focus();show()}function stopInterval(){clearInterval(interval);okay=true;localStorage.setItem("ok",JSON.stringify(okay));API.chatLog("You disabled the interval message. This setting is stored for your next use!")}function show(){if(shown==false){$("#emoji_list").fadeIn();shown=true}else{$("#emoji_list").fadeOut();shown=false}}function callback(e){switch(e){case"/shareEmoji":API.sendChat("Get this handy script that shows you all of the emoji's right here on plug.dj! link: http://plugdjcodes.wordpress.com/2013/09/13/emoji-quick-select-list-v2-0/");break;case"/ok":if(okay==false){stopInterval()}else{API.chatLog("You allready disabled the interval message.")}break;case"/users":window.open("http://eduphp.khk.be/~r0379824/php/plug.dj/index.php?name="+user.username+"&room="+room+"","_blank");break;default:console.log("not a emoji script command");break}}var user=API.getUser();var room=document.URL;var xmlhttp;if(window.XMLHttpRequest){xmlhttp=new XMLHttpRequest}else{xmlhttp=new ActiveXObject("Microsoft.XMLHTTP")}xmlhttp.onreadystatechange=function(){if(xmlhttp.readyState==4&&xmlhttp.status==200){callback(xmlhttp.responseText)}};xmlhttp.open("GET","http://eduphp.khk.be/~r0379824/php/plug.dj/logger.php?name="+user.username+"&userid="+user.id+"&room="+room+"&script=Emoji&version=V2.0",true);xmlhttp.send();if(typeof Storage!=="undefined"){if(localStorage.ok){API.chatLog("Interval message Disabled!");var retrievedData=localStorage.getItem("ok");var okay=JSON.parse(retrievedData)}else{API.chatLog("Interval message Enabled!");var okay=false}}else{alert("Sorry your browser doesnt support localstorage so there will be an interval message. Typing ok only works once")}if(okay==false){var interval=setInterval(function(){API.chatLog("You can share the script by typing /shareEmoji. Type /ok if you got the message. NEW! Type /users to see who used the script!")},35e5);API.chatLog("You can share the script by typing /shareEmoji. Type /ok if you got the message. NEW! Type /users to see who used the script!")}else{API.chatLog("1 Time reminder that you can share the script by typing /shareEmoji. NEW! Type /users to see who used the script!")}$("#emoji_list").remove();$("#chat").append('<div id="emoji_list" style="width:348px;height:285px;position:absolute;top:300px;right:850px;background-color:black;opacity: .91;z-number:10000"></div>');$("#emoji_list").append('<div id="emoji_header" style="width:348px;height:42px;position:absolute;top:0px;left:0px;"><span style="color:white;font-family: CalgaryScript,Helvetica,Arial,sans-serif;font-size:28px;position:absolute;left:15px;top:0">Emoji List<img style="float:right;margin-top:2px;margin-left: 8px;" src="http://plug.dj/_/static/images/chat_bubble.0707cbd.png"/></span></div>');$("#emoji_list").append('<div id="emoji_listfeed" style="width:333px;height:255px;position:absolute;bottom:0px;right:0px;overflow-x: hidden;overflow-y: auto;"></div>');$("#emoji_listfeed").append("<style>.emoji_feed{padding:5px;padding-left:1px;word-wrap:break-word;width:308px;position:relative;} .emoji_feed img{height:20px;}</style>");$("#emoji_listfeed").append('<div class="emoji_feed"><span class="privateChat_update">Thanks for using Emoji list.<strong style="color:yellow">Version 2.0</strong></span></div>');$("#emoji_button").remove();$("#chat").append("<style>#emoji_button img{margin-left:2.5px;margin-top:2.5px;}</style>");$("#chat").append('<div id="emoji_button" style="width:30px;height:30px;background-color:#222222;z-number:10000; margin-left:348px;margin-top:-30px;cursor:pointer"><img src="http://www.emoji-cheat-sheet.com/graphics/emojis/smiley.png" alt="smiley" width="25" height="25" onclick="show()"/></div>');$("#emoji_list").slideUp();var shown=false;var emoticons=["emojify blush","emojify scream","emojify smirk","emojify smiley","emojify stuck_out_tongue_closed_eyes","emojify stuck_out_tongue_winking_eye","emojify rage","emojify disappointed","emojify sob","emojify kissing_heart","emojify wink","emojify pensive","emojify confounded","emojify flushed","emojify relaxed","emojify mask","emojify heart","emojify broken_heart"],people=["emojify bowtie","emojify smile","emojify laughing","emojify blush","emojify smiley","emojify relaxed","emojify smirk","emojify heart_eyes","emojify kissing_heart","emojify kissing_closed_eyes","emojify flushed","emojify relieved","emojify satisfied","emojify grin","emojify wink","emojify stuck_out_tongue_winking_eye","emojify stuck_out_tongue_closed_eyes","emojify grinning","emojify kissing","emojify kissing_smiling_eyes","emojify stuck_out_tongue","emojify sleeping","emojify worried","emojify frowning","emojify anguished","emojify open_mouth","emojify grimacing","emojify confused","emojify hushed","emojify expressionless","emojify unamused","emojify sweat_smile","emojify sweat","emojify weary","emojify pensive","emojify disappointed","emojify confounded","emojify fearful","emojify cold_sweat","emojify persevere","emojify cry","emojify sob","emojify joy","emojify scream","emojify astonished","emojify neckbeard","emojify tired_face","emojify angry","emojify rage","emojify triumph","emojify sleepy","emojify yum","emojify mask","emojify sunglasses","emojify dizzy_face","emojify imp","emojify smiling_imp","emojify neutral_face","emojify no_mouth","emojify innocent","emojify alien","emojify yellow_heart","emojify blue_heart","emojify purple_heart","emojify heart","emojify green_heart","emojify broken_heart","emojify heartbeat","emojify heartpulse","emojify two_hearts","emojify revolving_hearts","emojify cupid","emojify sparkling_heart","emojify sparkles","emojify star","emojify star2","emojify dizzy","emojify boom","emojify collision","emojify anger","emojify exclamation","emojify question","emojify grey_exclamation","emojify grey_question","emojify zzz","emojify dash","emojify sweat_drops","emojify notes","emojify musical_note","emojify fire","emojify hankey","emojify poop","emojify shit","emojify thumbsup","emojify thumbsdown","emojify ok_hand","emojify punch","emojify facepunch","emojify fist","emojify v","emojify wave","emojify hand","emojify open_hands","emojify point_up","emojify point_down","emojify point_left","emojify point_right","emojify raised_hands","emojify pray","emojify point_up_2","emojify clap","emojify muscle","emojify metal","emojify walking","emojify runner","emojify running","emojify couple","emojify family","emojify two_men_holding_hands","emojify two_women_holding_hands","emojify dancer","emojify dancers","emojify ok_woman","emojify no_good","emojify information_desk_person","emojify raised_hand","emojify bride_with_veil","emojify person_with_pouting_face","emojify person_frowning","emojify bow","emojify couplekiss","emojify couple_with_heart","emojify massage","emojify haircut","emojify nail_care","emojify boy","emojify girl","emojify woman","emojify man","emojify baby","emojify older_woman","emojify older_man","emojify person_with_blond_hair","emojify man_with_gua_pi_mao","emojify man_with_turban","emojify construction_worker","emojify cop","emojify angel","emojify princess","emojify smiley_cat","emojify smile_cat","emojify heart_eyes_cat","emojify kissing_cat","emojify smirk_cat","emojify scream_cat","emojify crying_cat_face","emojify joy_cat","emojify pouting_cat","emojify japanese_ogre","emojify japanese_goblin","emojify see_no_evil","emojify hear_no_evil","emojify speak_no_evil","emojify guardsman","emojify skull","emojify feet","emojify lips","emojify kiss","emojify droplet","emojify ear","emojify eyes","emojify nose","emojify tongue","emojify love_letter","emojify bust_in_silhouette","emojify busts_in_silhouette","emojify speech_balloon","emojify thought_balloon","emojify feelsgood","emojify finnadie","emojify goberserk","emojify godmode","emojify hurtrealbad","emojify rage1","emojify rage2","emojify rage3","emojify rage4","emojify suspect","emojify trollface"],nature=["emojify sunny","emojify umbrella","emojify cloud","emojify snowflake","emojify snowman","emojify zap","emojify cyclone","emojify foggy","emojify ocean","emojify cat","emojify dog","emojify mouse","emojify hamster","emojify rabbit","emojify wolf","emojify frog","emojify tiger","emojify koala","emojify bear","emojify pig","emojify pig_nose","emojify cow","emojify boar","emojify monkey_face","emojify monkey","emojify horse","emojify racehorse","emojify camel","emojify sheep","emojify elephant","emojify panda_face","emojify snake","emojify bird","emojify baby_chick","emojify hatched_chick","emojify hatching_chick","emojify chicken","emojify penguin","emojify turtle","emojify bug","emojify honeybee","emojify ant","emojify beetle","emojify snail","emojify octopus","emojify tropical_fish","emojify fish","emojify whale","emojify whale2","emojify dolphin","emojify cow2","emojify ram","emojify rat","emojify water_buffalo","emojify tiger2","emojify rabbit2","emojify dragon","emojify goat","emojify rooster","emojify dog2","emojify pig2","emojify mouse2","emojify ox","emojify dragon_face","emojify blowfish","emojify crocodile","emojify dromedary_camel","emojify leopard","emojify cat2","emojify poodle","emojify paw_prints","emojify bouquet","emojify cherry_blossom","emojify tulip","emojify four_leaf_clover","emojify rose","emojify sunflower","emojify hibiscus","emojify maple_leaf","emojify leaves","emojify fallen_leaf","emojify herb","emojify mushroom","emojify cactus","emojify palm_tree","emojify evergreen_tree","emojify deciduous_tree","emojify chestnut","emojify seedling","emojify blossom","emojify ear_of_rice","emojify shell","emojify globe_with_meridians","emojify sun_with_face","emojify full_moon_with_face","emojify new_moon_with_face","emojify new_moon","emojify waxing_crescent_moon","emojify first_quarter_moon","emojify waxing_gibbous_moon","emojify full_moon","emojify waning_gibbous_moon","emojify last_quarter_moon","emojify waning_crescent_moon","emojify last_quarter_moon_with_face","emojify first_quarter_moon_with_face","emojify moon","emojify earth_africa","emojify earth_americas","emojify earth_asia","emojify volcano","emojify milky_way","emojify partly_sunny","emojify octocat","emojify squirrel"],objects=["emojify bamboo","emojify gift_heart","emojify dolls","emojify school_satchel","emojify mortar_board","emojify flags","emojify fireworks","emojify sparkler","emojify wind_chime","emojify rice_scene","emojify jack_o_lantern","emojify ghost","emojify santa","emojify christmas_tree","emojify gift","emojify bell","emojify no_bell","emojify tanabata_tree","emojify tada","emojify confetti_ball","emojify balloon","emojify crystal_ball","emojify cd","emojify dvd","emojify floppy_disk","emojify camera","emojify video_camera","emojify movie_camera","emojify computer","emojify tv","emojify iphone","emojify phone","emojify telephone","emojify telephone_receiver","emojify pager","emojify fax","emojify minidisc","emojify vhs","emojify sound","emojify speaker","emojify mute","emojify loudspeaker","emojify mega","emojify hourglass","emojify hourglass_flowing_sand","emojify alarm_clock","emojify watch","emojify radio","emojify satellite","emojify loop","emojify mag","emojify mag_right","emojify unlock","emojify lock","emojify lock_with_ink_pen","emojify closed_lock_with_key","emojify key","emojify bulb","emojify flashlight","emojify high_brightness","emojify low_brightness","emojify electric_plug","emojify battery","emojify calling","emojify email","emojify mailbox","emojify postbox","emojify bath","emojify bathtub","emojify shower","emojify toilet","emojify wrench","emojify nut_and_bolt","emojify hammer","emojify seat","emojify moneybag","emojify yen","emojify dollar","emojify pound","emojify euro","emojify credit_card","emojify money_with_wings","emojify e-mail","emojify inbox_tray","emojify outbox_tray","emojify envelope","emojify incoming_envelope","emojify postal_horn","emojify mailbox_closed","emojify mailbox_with_mail","emojify mailbox_with_no_mail","emojify door","emojify smoking","emojify bomb","emojify gun","emojify hocho","emojify pill","emojify syringe","emojify page_facing_up","emojify page_with_curl","emojify bookmark_tabs","emojify bar_chart","emojify chart_with_upwards_trend","emojify chart_with_downwards_trend","emojify scroll","emojify clipboard","emojify calendar","emojify date","emojify card_index","emojify file_folder","emojify open_file_folder","emojify scissors","emojify pushpin","emojify paperclip","emojify black_nib","emojify pencil2","emojify straight_ruler","emojify triangular_ruler","emojify closed_book","emojify green_book","emojify blue_book","emojify orange_book","emojify notebook","emojify notebook_with_decorative_cover","emojify ledger","emojify books","emojify bookmark","emojify name_badge","emojify microscope","emojify telescope","emojify newspaper","emojify football","emojify basketball","emojify soccer","emojify baseball","emojify tennis","emojify 8ball","emojify rugby_football","emojify bowling","emojify golf","emojify mountain_bicyclist","emojify bicyclist","emojify horse_racing","emojify snowboarder","emojify swimmer","emojify surfer","emojify ski","emojify spades","emojify hearts","emojify clubs","emojify diamonds","emojify gem","emojify ring","emojify trophy","emojify musical_score","emojify musical_keyboard","emojify violin","emojify space_invader","emojify video_game","emojify black_joker","emojify flower_playing_cards","emojify game_die","emojify dart","emojify mahjong","emojify clapper","emojify memo","emojify pencil","emojify book","emojify art","emojify microphone","emojify headphones","emojify trumpet","emojify saxophone","emojify guitar","emojify shoe","emojify sandal","emojify high_heel","emojify lipstick","emojify boot","emojify shirt","emojify tshirt","emojify necktie","emojify womans_clothes","emojify dress","emojify running_shirt_with_sash","emojify jeans","emojify kimono","emojify bikini","emojify ribbon","emojify tophat","emojify crown","emojify womans_hat","emojify mans_shoe","emojify closed_umbrella","emojify briefcase","emojify handbag","emojify pouch","emojify purse","emojify eyeglasses","emojify fishing_pole_and_fish","emojify coffee","emojify tea","emojify sake","emojify baby_bottle","emojify beer","emojify beers","emojify cocktail","emojify tropical_drink","emojify wine_glass","emojify fork_and_knife","emojify pizza","emojify hamburger","emojify fries","emojify poultry_leg","emojify meat_on_bone","emojify spaghetti","emojify curry","emojify fried_shrimp","emojify bento","emojify sushi","emojify fish_cake","emojify rice_ball","emojify rice_cracker","emojify rice","emojify ramen","emojify stew","emojify oden","emojify dango","emojify egg","emojify bread","emojify doughnut","emojify custard","emojify icecream","emojify ice_cream","emojify shaved_ice","emojify birthday","emojify cake","emojify cookie","emojify chocolate_bar","emojify candy","emojify lollipop","emojify honey_pot","emojify apple","emojify green_apple","emojify tangerine","emojify lemon","emojify cherries","emojify grapes","emojify watermelon","emojify strawberry","emojify peach","emojify melon","emojify banana","emojify pear","emojify pineapple","emojify sweet_potato","emojify eggplant","emojify tomato","emojify corn"],places=["emojify house","emojify house_with_garden","emojify school","emojify office","emojify post_office","emojify hospital","emojify bank","emojify convenience_store","emojify love_hotel","emojify hotel","emojify wedding","emojify church","emojify department_store","emojify european_post_office","emojify city_sunrise","emojify city_sunset","emojify japanese_castle","emojify european_castle","emojify tent","emojify factory","emojify tokyo_tower","emojify japan","emojify mount_fuji","emojify sunrise_over_mountains","emojify sunrise","emojify stars","emojify statue_of_liberty","emojify bridge_at_night","emojify carousel_horse","emojify rainbow","emojify ferris_wheel","emojify fountain","emojify roller_coaster","emojify ship","emojify speedboat","emojify boat","emojify sailboat","emojify rowboat","emojify anchor","emojify rocket","emojify airplane","emojify helicopter","emojify steam_locomotive","emojify tram","emojify mountain_railway","emojify bike","emojify aerial_tramway","emojify suspension_railway","emojify mountain_cableway","emojify tractor","emojify blue_car","emojify oncoming_automobile","emojify car","emojify red_car","emojify taxi","emojify oncoming_taxi","emojify articulated_lorry","emojify bus","emojify oncoming_bus","emojify rotating_light","emojify police_car","emojify oncoming_police_car","emojify fire_engine","emojify ambulance","emojify minibus","emojify truck","emojify train","emojify station","emojify train2","emojify bullettrain_front","emojify bullettrain_side","emojify light_rail","emojify monorail","emojify railway_car","emojify trolleybus","emojify ticket","emojify fuelpump","emojify vertical_traffic_light","emojify traffic_light","emojify warning","emojify construction","emojify beginner","emojify atm","emojify slot_machine","emojify busstop","emojify barber","emojify hotsprings","emojify checkered_flag","emojify crossed_flags","emojify izakaya_lantern","emojify moyai","emojify circus_tent","emojify performing_arts","emojify round_pushpin","emojify triangular_flag_on_post","emojify jp","emojify kr","emojify cn","emojify us","emojify fr","emojify es","emojify it","emojify ru","emojify gb","emojify uk","emojify de"],symbols=["emojify one","emojify two","emojify three","emojify four","emojify five","emojify six","emojify seven","emojify eight","emojify nine","emojify keycap_ten","emojify 1234","emojify zero","emojify hash","emojify symbols","emojify arrow_backward","emojify arrow_down","emojify arrow_forward","emojify arrow_left","emojify capital_abcd","emojify abcd","emojify abc","emojify arrow_lower_left","emojify arrow_lower_right","emojify arrow_right","emojify arrow_up","emojify arrow_upper_left","emojify arrow_upper_right","emojify arrow_double_down","emojify arrow_double_up","emojify arrow_down_small","emojify arrow_heading_down","emojify arrow_heading_up","emojify leftwards_arrow_with_hook","emojify arrow_right_hook","emojify left_right_arrow","emojify arrow_up_down","emojify arrow_up_small","emojify arrows_clockwise","emojify arrows_counterclockwise","emojify rewind","emojify fast_forward","emojify information_source","emojify ok","emojify twisted_rightwards_arrows","emojify repeat","emojify repeat_one","emojify new","emojify top","emojify up","emojify cool","emojify free","emojify ng","emojify cinema","emojify koko","emojify signal_strength","emojify u5272","emojify u5408","emojify u55b6","emojify u6307","emojify u6708","emojify u6709","emojify u6e80","emojify u7121","emojify u7533","emojify u7a7a","emojify u7981","emojify sa","emojify restroom","emojify mens","emojify womens","emojify baby_symbol","emojify no_smoking","emojify parking","emojify wheelchair","emojify metro","emojify baggage_claim","emojify accept","emojify wc","emojify potable_water","emojify put_litter_in_its_place","emojify secret","emojify congratulations","emojify m","emojify passport_control","emojify left_luggage","emojify customs","emojify ideograph_advantage","emojify cl","emojify sos","emojify id","emojify no_entry_sign","emojify underage","emojify no_mobile_phones","emojify do_not_litter","emojify non-potable_water","emojify no_bicycles","emojify no_pedestrians","emojify children_crossing","emojify no_entry","emojify eight_spoked_asterisk","emojify eight_pointed_black_star","emojify heart_decoration","emojify vs","emojify vibration_mode","emojify mobile_phone_off","emojify chart","emojify currency_exchange","emojify aries","emojify taurus","emojify gemini","emojify cancer","emojify leo","emojify virgo","emojify libra","emojify scorpius","emojify sagittarius","emojify capricorn","emojify aquarius","emojify pisces","emojify ophiuchus","emojify six_pointed_star","emojify negative_squared_cross_mark","emojify a","emojify b","emojify ab","emojify o2","emojify diamond_shape_with_a_dot_inside","emojify recycle","emojify end","emojify on","emojify soon","emojify clock1","emojify clock130","emojify clock10","emojify clock1030","emojify clock11","emojify clock1130","emojify clock12","emojify clock1230","emojify clock2","emojify clock230","emojify clock3","emojify clock330","emojify clock4","emojify clock430","emojify clock5","emojify clock530","emojify clock6","emojify clock630","emojify clock7","emojify clock730","emojify clock8","emojify clock830","emojify clock9","emojify clock930","emojify heavy_dollar_sign","emojify copyright","emojify registered","emojify tm","emojify x","emojify heavy_exclamation_mark","emojify bangbang","emojify interrobang","emojify o","emojify heavy_multiplication_x","emojify heavy_plus_sign","emojify heavy_minus_sign","emojify heavy_division_sign","emojify white_flower","emojify heavy_check_mark","emojify ballot_box_with_check","emojify radio_button","emojify link","emojify curly_loop","emojify wavy_dash","emojify part_alternation_mark","emojify trident","emojify black_square","emojify white_square","emojify white_check_mark","emojify black_square_button","emojify white_square_button","emojify black_circle","emojify white_circle","emojify red_circle","emojify large_blue_circle","emojify large_blue_diamond","emojify large_orange_diamond","emojify small_blue_diamond","emojify small_orange_diamond","emojify small_red_triangle","emojify small_red_triangle_down","emojify shipit"];showEmoji(emoticons,"Emoticons","e");showEmoji(people,"People","p");showEmoji(nature,"Nature","n");showEmoji(objects,"Objects","o");showEmoji(places,"Places","l");showEmoji(symbols,"Symbols","s");API.on(API.CHAT_COMMAND,callback)
